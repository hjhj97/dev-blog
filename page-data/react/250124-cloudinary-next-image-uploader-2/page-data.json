{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/250124-cloudinary-next-image-uploader-2/","result":{"data":{"site":{"siteMetadata":{"title":"하주헌 개발 블로그"}},"markdownRemark":{"id":"dc0394d0-3497-53e5-b7bd-358e12314443","excerpt":"기능 추가하기 지난 포스팅에서 언급했다시피 기본으로 제공하는 업로드 기능에서 다음…","html":"<h2>기능 추가하기</h2>\n<p>지난 포스팅에서 언급했다시피 기본으로 제공하는 업로드 기능에서 다음 5가지 기능을 추가해보고자 한다.</p>\n<ol>\n<li>파일 동시에 여러개 업로드 허용</li>\n<li>업로드 전에 파일 미리보기</li>\n<li>파일명 수정할 수 있도록 하기</li>\n<li>업로드 후 이미지 경로 받아오기</li>\n<li>이미지 경로를 마크다운 문법으로 변환</li>\n</ol>\n<h4>파일 여러개 업로드 / 미리보기 / 파일명 수정하기</h4>\n<p>먼저 1,2,3번의 기능을 구현해보자. 3개의 기능이 모두 연관되어 있으므로 한번에 구현할 것이다. 파일을 업로드 하는 로직들은 <code class=\"language-text\">useFileUploader.ts</code> hook으로 분리하여 작성했다. 이 안에서 로컬 파일을 브라우저에 업로드하는 역할을 담당하는 <code class=\"language-text\">handleFileChange</code> 함수를 보자.</p>\n<deckgo-highlight-code language=\"ts\"  >\n          <code slot=\"code\">// useFileUploader.ts\n...\nconst [files, setFiles] = useState&lt;File[]&gt;([]);\nconst [previewUrls, setPreviewUrls] = useState&lt;PreviewUrl[]&gt;([]);\n\nconst handleFileChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n  if (!e.target.files) return\n  setIsUploaded(false)\n\n  const selectedFiles = Array.from(e.target.files)\n  setFiles(selectedFiles)\n\n  const previews: PreviewUrl[] = []\n  selectedFiles.forEach(file =&gt; {\n    const fileReader = new FileReader()\n    fileReader.onloadend = () =&gt; {\n      previews.push({\n        url: fileReader.result as string,\n        name: file.name,\n        originalName: file.name,\n        isEditing: false,\n      })\n      if (previews.length === selectedFiles.length) {\n        setPreviewUrls(previews)\n      }\n    }\n    fileReader.readAsDataURL(file)\n  })\n}\n...</code>\n        </deckgo-highlight-code>\n<br />\n<p>파일을 업로드 하기 위해서 <code class=\"language-text\">&lt;input type=\"file\"></code> 태그를 사용하며 <code class=\"language-text\">multiple</code> 속성을 추가하면 여러개의 파일을 동시에 업로드할 수 있다. 그러면 <code class=\"language-text\">onChange</code> 이벤트 핸들러에서 여러개의 파일을 받아올 수 있다. 이 때 받아온 파일은 <code class=\"language-text\">FileList</code> 는 유사배열 형태의 타입이다.</p>\n<p>원래는 <code class=\"language-text\">File</code> 객체를 <code class=\"language-text\">FormData</code> 에 <code class=\"language-text\">append</code>한 뒤 <code class=\"language-text\">POST</code> 요청의 <code class=\"language-text\">body</code>에 담아 보내도 업로드되지만, 이번에는 이미지를 업로드 하기 전에 미리보기를 보여주고 파일명을 수정하는 기능을 제공해야 하므로 이미지 파일의 Base64 URL을 따로 뽑아내야 한다.</p>\n<p>일단 <code class=\"language-text\">Array.from()</code> 메서드를 사용하여 배열로 변환하여 <code class=\"language-text\">FileList</code> 타입을 <code class=\"language-text\">File[]</code> 타입으로 변환한다. <code class=\"language-text\">File</code> 타입 자체로는 브라우저에서 이미지 미리보기를 지원하지 않으므로 <code class=\"language-text\">FileReader</code> 객체와 <code class=\"language-text\">readAsDataURL()</code> 메서드를 사용하여 이미지를 Base64 형태의 URL로 뽑아낸다.</p>\n<p><code class=\"language-text\">FileReader</code> 객체는 비동기 방식으로 동작하므로 <code class=\"language-text\">onloadend</code> 이벤트 핸들러를 작성한다. 이 때 이미지의 URL을 뽑아내려면 <code class=\"language-text\">FileReader.result</code> 값을 사용한다. 그리고 파일명이 바뀔 수 있음을 염두에 두려면 원본 파일명인 <code class=\"language-text\">originalName</code>와 바뀐 파일명 <code class=\"language-text\">name</code> 속성을 추가해야 한다. 또한 파일명을 수정할 수 있도록 하기 위해 <code class=\"language-text\">isEditing</code> 속성을 추가했다. 이 값이 <code class=\"language-text\">true</code> 라면 수정이 가능하도록 <code class=\"language-text\">&lt;input></code> 태그를 활성화시킨다.</p>\n<p><code class=\"language-text\">File[]</code> 배열을 순회하면서 이 속성들을 <code class=\"language-text\">previewUrls</code> 배열에 하나씩 push 한다. 이 때 모든 파일을 다 읽어왔다면 <code class=\"language-text\">setPreviewUrls()</code> 함수를 호출하여 <code class=\"language-text\">previewUrls</code> 배열을 업데이트한다. <code class=\"language-text\">previewUrls</code> 배열은 <code class=\"language-text\">PreviewList</code> 컴포넌트에서 <code class=\"language-text\">prop</code>으로 받아와 미리보기 이미지를 표시하고 파일명을 수정할 수 있도록 한다.</p>\n<details>\n<summary>\n<code>PreviewList.tsx</code> 컴포넌트\n</summary>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// PreviewList.tsx\nimport type { PreviewUrl } from &quot;./hooks/useFileUploader&quot;\n\ntype PreviewListProps = {\n  previewUrls: PreviewUrl[]\n  setPreviewUrls: React.Dispatch&lt;React.SetStateAction&lt;PreviewUrl[]&gt;&gt;\n  startEdit: (index: number) =&gt; void\n  confirmEdit: (index: number, newName: string) =&gt; void\n  cancelEdit: (index: number) =&gt; void\n  handleDeleteFile: (index: number) =&gt; void\n  handleDeleteAll: () =&gt; void\n  isUploaded: boolean\n}\n\nfunction PreviewList({\n  previewUrls,\n  setPreviewUrls,\n  startEdit,\n  confirmEdit,\n  cancelEdit,\n  handleDeleteFile,\n  handleDeleteAll,\n  isUploaded,\n}: PreviewListProps) {\n  const handleNameChange = (fileIndex: number, newValue: string) =&gt; {\n    setPreviewUrls(\n      previewUrls.map((url, i) =&gt;\n        i === fileIndex ? { ...url, name: newValue } : url\n      )\n    )\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;button type=&quot;button&quot; onClick={handleDeleteAll} disabled={isUploaded}&gt;\n          Delete All\n        &lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        {previewUrls.map((preview, index) =&gt; (\n          &lt;div key={preview.name}&gt;\n            &lt;img src={preview.url} alt={`Preview ${index + 1}`} /&gt;\n            &lt;div&gt;\n              {preview.isEditing ? (\n                &lt;EditMode\n                  preview={preview}\n                  index={index}\n                  handleNameChange={handleNameChange}\n                  confirmEdit={confirmEdit}\n                  cancelEdit={cancelEdit}\n                /&gt;\n              ) : (\n                &lt;PreviewMode\n                  preview={preview}\n                  index={index}\n                  startEdit={startEdit}\n                  handleDeleteFile={handleDeleteFile}\n                  isUploaded={isUploaded}\n                /&gt;\n              )}\n            &lt;/div&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n...\nexport default PreviewList</code>\n        </deckgo-highlight-code>\n</details>\n<h4>데모</h4>\n<p><img src=\"https://res.cloudinary.com/dxnnrbhbk/image/upload/v1737652954/blog/assets/demo1.gif\" alt=\"preview images\"></p>\n<h4>업로드 후 경로 받아오기 / 마크다운 문법으로 변환</h4>\n<p>API를 호출하여 업로드에 성공하면 응답값으로 업로드 경로인 <code class=\"language-text\">secure_url</code> 을 받을 수 있다. 구글 드라이브와 같은 타 클라우드 플랫폼에서는 공유용 URL로 들어가보면 웹페이지에 에디터 모드가 씌워진 형태라 불편했는데, Cloudinary에서 제공하는 URL은 순수하게 저장된 경로를 알려주므로 편리하다.</p>\n<p>이 경로를 HTML과 마크다운 문법으로 변환하여 클립보드에 복사하는 기능을 추가해보자. 이는 <code class=\"language-text\">window</code> 객체 중에서 <code class=\"language-text\">navigator.clipboard.writeText()</code> 메서드를 사용하면 된다. (<code class=\"language-text\">write()</code> 메서드를 사용하더라도 무관하다. 차이는 <code class=\"language-text\">wrtie()</code> 메서드는 이미지 같은 다양한 포맷의 파일의 복사를 지원해준다는 점이다.)</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// CopyButton.tsx\ninterface CopyButtonProps {\n  text: string\n  children?: React.ReactNode\n  onCopy?: () =&gt; void\n}\n\nexport default function CopyButton({\n  text,\n  children,\n  onCopy,\n}: CopyButtonProps) {\n  const handleCopy = async () =&gt; {\n    try {\n      await navigator.clipboard.writeText(text)\n      onCopy?.()\n    } catch (error) {\n      console.error(&quot;Failed to copy:&quot;, error)\n    }\n  }\n\n  return (\n    &lt;button title={text} onClick={handleCopy}&gt;\n      {children || &quot;Copy&quot;}\n    &lt;/button&gt;\n  )\n}</code>\n        </deckgo-highlight-code>\n<p>그리고 이 컴포넌트를 사용하여 버튼을 누르면 클립보드에 복사하는 기능을 추가했다. HTML과 Markdown 문법으로 변환하는 함수는 각각 <code class=\"language-text\">convertToHtml()</code>과 <code class=\"language-text\">convertToMarkdown()</code> 함수를 작성했다.</p>\n<deckgo-highlight-code language=\"tsx\"  >\n          <code slot=\"code\">// UploadResult.tsx\nfunction UploadResult() {\n  const convertToHtml = (url: string) =&gt; `&lt;img src=&quot;${url}&quot; alt=&quot;preview images&quot; /&gt;`;\n  const convertToMarkdown = (url: string) =&gt; `![preview images](${url})`;\n  ...\n\n  return (\n    &lt;div&gt;\n      ...\n      {fileUrls.map((url) =&gt; (\n        &lt;div key={url}&gt;\n          &lt;img src={url} alt=&#39;preview images&#39;/&gt;\n          &lt;CopyButton text={url} onCopy={() =&gt; setCopied(true)}&gt;\n            &lt;span&gt;URL&lt;/span&gt;\n          &lt;/CopyButton&gt;\n          &lt;CopyButton text={convertToHtml(url)} onCopy={() =&gt; setCopied(true)}&gt;\n            &lt;span&gt;HTML&lt;/span&gt;\n          &lt;/CopyButton&gt;\n          &lt;CopyButton text={convertToMarkdown(url)} onCopy={() =&gt; setCopied(true)}&gt;\n            &lt;span&gt;Markdown&lt;/span&gt;\n          &lt;/CopyButton&gt;\n        &lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  )\n}\n...</code>\n        </deckgo-highlight-code>\n<h4>데모</h4>\n<p><img src=\"https://res.cloudinary.com/dxnnrbhbk/image/upload/v1737653198/blog/assets/demo2.gif\" alt=\"preview images\"></p>\n<p>내가 원하던대로 파일을 여러개 업로드하고 미리보기를 볼 수 있으며, 파일명을 수정할 수 있고, 업로드 후 이미지 경로를 받아올 수 있으며, 이를 마크다운 문법으로 변환할 수 있게 되었다.</p>\n<p>Cloudinary 콘솔에 들어가면 이처럼 내가 업로드한 이미지들을 한번에 확인해볼 수 있다.</p>\n<p><img src=\"https://res.cloudinary.com/dxnnrbhbk/image/upload/v1737696160/blog/assets/result.png\" alt=\"result\"></p>\n<p>이 프로젝트의 소스코드는 <a href=\"https://github.com/hjhj97/next-cloudinary-image-uploader\">Github</a>에서 확인할 수 있다.</p>\n<h2>예외 처리</h2>\n<p>시간이 된다면 다음과 같은 예외 처리도 구현해보고자 한다.</p>\n<ol>\n<li>파일 업로드 실패 처리</li>\n<li>중복되는 파일명 처리</li>\n<li>파일 포맷 검증</li>\n<li>파일 크기 검증</li>\n</ol>","frontmatter":{"title":"Cloudinary API + Next.js 로 이미지 업로드 자동화 (2 of 2)","date":"2025-01-24","keywords":null,"description":"블로그에 올릴 이미지의 업로드를 자동화하는 웹페이지 만들기","category":"React"}},"previous":{"fields":{"slug":"/react/250123-cloudinary-next-image-uploader-1/"},"frontmatter":{"title":"Cloudinary API + Next.js 로 이미지 업로드 자동화 (1 of 2)"}},"next":{"fields":{"slug":"/react/250126-cloudinary-next-image-uploader-3/"},"frontmatter":{"title":"이미지 업로드 자동화 에러 핸들링/개선 사항"}}},"pageContext":{"id":"dc0394d0-3497-53e5-b7bd-358e12314443","previousPostId":"d983dd70-2b37-59c5-bed7-340d9b4a2ff0","nextPostId":"95ee1392-a967-547d-bd03-fc0e147053f7"}},"staticQueryHashes":["2841359383","3821306223"],"slicesMap":{}}